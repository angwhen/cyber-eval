#!/usr/bin/env python
import numpy as np
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
import scipy as sp
import scipy.stats

def mean_confidence_interval(data, confidence=0.95):
    a = 1.0*np.array(data)
    n = len(a)
    m, se = np.mean(a), scipy.stats.sem(a)
    h = se * sp.stats.t._ppf((1+confidence)/2., n-1)
    return m, m-h, m+h


# add a 'best fit' line
eval_score_list = [2.2049670036111637, 4.4017837988457549, 3.3952782170565672, 6.9491690845656855, 0.85964495412907305, 5.1766264372208148, 4.5949787542968483, 3.3878317079699292, 3.9519384426108659, 2.8335228353648492, 4.3891279442959901, 3.2069090101591637, 2.472341990198724, 5.2989613359073751, 3.6332392703107894, -1.3518537949542042, 2.1628786898796055, 1.7559812119930109, 4.0474699302285506, 4.6821554508012593]

p_value_list = [0.31819635509319083, 0.29811521068664865, 0.043605837718063672, 4.9604788503698014e-06, 11.644116501382713, 192.58229878121602, 0.3880388958788521, 3.1038006823461455e-06, 9.945884851532556e-06, 8.8982019260813239, 0.0011556342447080167, 0.0003230286766608189, 82.962609937455497, 1.0268096284683519, 9.4580043013751144e-08, 0.0010943803423339681, 7.1759447374909283e-05, 0.00084748809017308956, 44777.37065332503, 0.037665261032043408]

m, lower, upper = mean_confidence_interval(p_value_list)
print "mean is %f, confidence interval (0.95) is (%f,%f)"%(m,lower,upper)
plt.hist(eval_score_list, bins=5)

plt.xlabel('Evaluation Score')
plt.ylabel('Count')
plt.grid(True)

plt.show()





